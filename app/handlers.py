from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto

import os
from dotenv import load_dotenv
from create_bot import bot

import app.other_funcs as of
import app.requests_funcs as rf

import app.keyboards as kb

router = Router()

load_dotenv()

TGK_ADDRESS = os.getenv("TGK_ADDRESS")


class AddAdForm(StatesGroup):
    title = State()
    description = State()
    image = State()
    price = State()
    user_id = State()
    user_teg = State()
    ads_id = State()


@router.message(CommandStart())
async def start(message: Message) -> None:
    await message.answer("*—Å—Ç–∞—Ä—Ç*", reply_markup=kb.start)


@router.message(Command("help"))
async def get_help(message: Message) -> None:
    await message.answer("*–ø–æ–º–æ—â—å*", reply_markup=kb.without_image)


@router.message(Command("add_ad"))
async def add_ad_first(message: Message, state: FSMContext):
    await state.set_state(AddAdForm.title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–≤–ª–µ–Ω–∏—è:")


@router.message(AddAdForm.title)
async def add_ad_second(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(AddAdForm.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")


@router.message(AddAdForm.description)
async def add_ad_third(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AddAdForm.image)
    await message.answer("–û—Ç–ø—Ä–∞–≤—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É:", reply_markup=kb.without_image)


@router.message(AddAdForm.image)
async def add_ad_fourth1(message: Message, state: FSMContext):
    if message.photo:
        await state.update_data(image=message.photo[-1].file_id)
        await state.set_state(AddAdForm.price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞(‚ÇΩ):")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")


@router.callback_query(lambda c: c.data == "no_image")
async def process_no_image(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.update_data(image="")
    await state.set_state(AddAdForm.price)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞(‚ÇΩ):")


@router.message(AddAdForm.price)
async def add_ad_fifth(message: Message, state: FSMContext):
    try:
        price = int(message.text)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
        user_id = message.from_user.id
        user_tag = message.from_user.username
        ads_id = rf.get("/get_ad_id")['ad_id']  # –∑–∞–ø—Ä–æ—Å id —Ç–æ–≤–∞—Ä–∞

        await state.update_data(price=price)
        await state.update_data(user_id=user_id)
        await state.update_data(user_tag=user_tag)
        await state.update_data(ads_id=ads_id)
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ—ã

        data = await state.get_data()
        ad_message, image_id = await of.create_ad_message(data)  # —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è

        if image_id:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–æ—Ç–æ
            await message.answer_photo(photo=image_id, caption=ad_message, parse_mode='Markdown',
                                       reply_markup=kb.ready_ad)
        else:
            await message.answer(ad_message, parse_mode='Markdown', reply_markup=kb.ready_ad)

        await state.set_state(None)
    except ValueError:  # —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞ —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –≤ —á–∏—Å–ª–æ (—Å—Ç—Ä–æ–∫–∞ 85)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
    except TypeError:
        await message.answer("*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!*",
                             parse_mode='Markdown')


@router.callback_query(lambda c: c.data == "publish")
async def publish(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        ad_message, image_id = await of.create_ad_message(data)
        if image_id == "":
            publish_ad = await bot.send_message(chat_id=f"@{TGK_ADDRESS}", text=ad_message, parse_mode='Markdown')
        else:
            publish_ad = await bot.send_photo(chat_id=f"@{TGK_ADDRESS}",
                                              photo=image_id, caption=ad_message, parse_mode='Markdown')
        message_id = publish_ad.message_id
        data["message_id"] = message_id
        result = rf.post("/add_ad", data)
        await callback.answer()
        await callback.message.delete()
        if result["status"] == "ERROR":
            raise ValueError("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –±–¥")
        await callback.message.answer(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ‚úÖ\n\n[–æ–±—ä—è–≤–ª–µ–Ω–∏–µ]"
                                      f"(https://t.me/{TGK_ADDRESS}/{publish_ad.message_id})",
                                      parse_mode='Markdown')
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê: {e}")
        await bot.delete_message(chat_id=f"@{TGK_ADDRESS}", message_id=message_id)
        await callback.message.answer("*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!*",
                                      parse_mode='Markdown')


@router.message(Command("my_ads"))
async def show_ads(message: Message) -> None:
    try:
        user_id = message.from_user.id
        ads = rf.get(f"/get_ad/user_id", params={'value': f'{user_id}'})
        if ads["status"] == "ERROR":
            raise TypeError("ERROR")
        kb_ads = InlineKeyboardMarkup(inline_keyboard=[])
        for ad in ads['ads']:
            kb_ads.inline_keyboard.append(
                [InlineKeyboardButton(text=ad["title"], callback_data=f"click_ad:{ad['ads_id']}:{ad['message_id']}")])
        await message.answer("*–í–∞—à–∏ –∞–¥—ã*", reply_markup=kb_ads)
    except TypeError as e:
        await message.answer("*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!*",
                             parse_mode='Markdown')


@router.callback_query(lambda c: c.data.startswith('click_ad:'))
async def process_callback_button(callback: CallbackQuery):
    data = callback.data.split(':')
    ad_id = data[1]  # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    message_id = data[2]
    ad = rf.get(f"/get_ad/ads_id/{ad_id}")
    ad_message, image_id = await of.create_ad_message(ad)
    kb_delete = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å",
                                                                            callback_data=f"delete_ad:{ad_id}:{message_id}")]])
    await callback.message.delete()
    if image_id:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–æ—Ç–æ
        await callback.message.answer_photo(photo=image_id, caption=ad_message, parse_mode='Markdown',
                                            reply_markup=kb_delete)
    else:
        await callback.message.answer(ad_message, parse_mode='Markdown', reply_markup=kb_delete)


@router.callback_query(lambda c: c.data.startswith('delete_ad:'))
async def delete_ad(callback: CallbackQuery):
    data = callback.data.split(':')
    ad_id = data[1]
    message_id = data[2]
    kb_sure = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_del:{ad_id}:{message_id}")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_del")]
    ])
    await callback.message.delete()
    await callback.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã?", parse_mode='Markdown',
                                  reply_markup=kb_sure)


@router.callback_query(lambda c: c.data.startswith('confirm_del:'))
async def delete(callback: CallbackQuery):
    data = callback.data.split(':')
    ad_id = data[1]
    message_id = data[2]
    result = rf.delete(f"/delete_ad/{ad_id}")
    await bot.delete_message(chat_id=f"@{TGK_ADDRESS}", message_id=message_id)
    if result["status"] == "OK":
        await callback.message.edit_text("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ üóë")
    elif result["status"] == "ERROR":
        await callback.message.edit_text("*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!*",
                                         parse_mode='Markdown')


@router.callback_query(lambda c: c.data == "cancel_del")
async def cancel_del(callback: CallbackQuery):
    await callback.message.delete()
